"""Initial schema

Revision ID: 2182d57beed6
Revises: 
Create Date: 2025-04-18 23:17:42.097280

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2182d57beed6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_sensor_data_measurement_timestamp', table_name='sensor_data')
    op.drop_table('sensor_data')
    op.drop_table('sensor')
    op.drop_index('ix_sensor_box_name', table_name='sensor_box')
    op.drop_table('sensor_box')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sensor_box',
    sa.Column('box_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('exposure', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('currentLocation', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('lastMeasurementAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_data_fetched', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('box_id', name='sensor_box_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_sensor_box_name', 'sensor_box', ['name'], unique=True)
    op.create_table('sensor',
    sa.Column('sensor_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('box_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sensor_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['box_id'], ['sensor_box.box_id'], name='sensor_box_id_fkey'),
    sa.PrimaryKeyConstraint('sensor_id', name='sensor_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sensor_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sensor_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('measurement_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.sensor_id'], name='sensor_data_sensor_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'measurement_timestamp', 'sensor_id', name='sensor_data_pkey')
    )
    op.create_index('ix_sensor_data_measurement_timestamp', 'sensor_data', ['measurement_timestamp'], unique=False)
    # ### end Alembic commands ###
